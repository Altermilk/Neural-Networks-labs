import os
import io
import requests
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import pandas as pd

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ù ---
BOT_TOKEN = "7600285761:AAFsL_GtZhFV8-xxPUU552jMaBjc7Lsa-0Q"
CHAT_ID_FILE = "chat_id.txt"

# --- –í—ù–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_chat_id():
    """
    –ü–æ–ª—É—á–∞–µ—Ç chat_id –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ Telegram API.
    """
    if os.path.exists(CHAT_ID_FILE):
        with open(CHAT_ID_FILE, "r") as f:
            return f.read().strip()

    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        chat_id = data["result"][-1]["message"]["chat"]["id"]
        with open(CHAT_ID_FILE, "w") as f:
            f.write(str(chat_id))
        print(f"[telegram] üíæ chat_id —ù–æ—Ö—Ä–∞–Ω—ë–Ω: {chat_id}")
        return str(chat_id)
    except Exception as e:
        print(f"[telegram] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id: {e}")
        return None

def _send_request(method: str, data: dict, files: dict = None):
    """
    –£–Ω–∏–≤–µ—Ä—ù–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤—â–∏–∫ –∑–∞–ø—Ä–æ—ù–æ–≤ –≤ Telegram API.
    """
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/{method}"
    try:
        response = requests.post(url, data=data, files=files)
        response.raise_for_status()
        print(f"[telegram] ‚úÖ {method}.")
    except requests.RequestException as e:
        print(f"[telegram] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–µ—Ç–æ–¥–µ {method}: {e}")

# --- –û—ù–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—ù ---
def notify(message: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—ù—Ç–æ–≤–æ–µ —ù–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    chat_id = get_chat_id()
    if not chat_id:
        print("[notify] ‚ùå chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data = {"chat_id": chat_id, "text": message}
    _send_request("sendMessage", data)

def send_plot(fig: Figure, caption: str = "üìä –ì—Ä–∞—Ñ–∏–∫"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—ù–µ—Ç matplotlib-–≥—Ä–∞—Ñ–∏–∫ –≤ Telegram (–±–µ–∑ —ù–æ—Ö—Ä–∞–Ω–µ–Ω–∏—ù –Ω–∞ –¥–∏—ù–∫).
    """
    chat_id = get_chat_id()
    if not chat_id:
        print("[send_plot] ‚ùå chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)

    files = {"photo": ("plot.png", buf, "image/png")}
    data = {"chat_id": chat_id, "caption": caption}
    _send_request("sendPhoto", data, files)
    buf.flush()
    buf.close()

def send_classification_report_as_pdf(report_text: str, caption: str = "üìÑ Classification Report"):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π classification_report –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –∫–∞–∫ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram.
    """
    chat_id = get_chat_id()
    if not chat_id:
        print("[send_classification_report_as_pdf] ‚ùå chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    lines = [line.strip() for line in report_text.strip().split('\n') if line.strip()]
    header = lines[0].split()
    data = []
    index = []

    for line in lines[1:]:
        parts = line.split()
        if len(parts) >= 4:
            label = " ".join(parts[:-4])
            row = parts[-4:]
            index.append(label)
            data.append(row)

    df = pd.DataFrame(data, columns=header, index=index)

    # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    fig, ax = plt.subplots(figsize=(12, len(df) * 0.3 + 2))
    ax.axis("off")
    table = ax.table(cellText=df.values,
                     colLabels=df.columns,
                     rowLabels=df.index,
                     loc="center",
                     cellLoc='center')

    table.scale(1, 1.2)
    table.auto_set_font_size(False)
    table.set_fontsize(8)

    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PDF
    buf = io.BytesIO()
    fig.savefig(buf, format='pdf')
    buf.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    files = {"document": ("report.pdf", buf, "application/pdf")}
    data = {"chat_id": chat_id, "caption": caption}
    _send_request("sendDocument", data, files)

    buf.close()


# --- –ü—Ä–∏–º–µ—Ä –∏—ù–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—ù ---
if __name__ == "main":
    notify("‚úÖ –ë–æ—Ç –Ω–∞—ù—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    fig = plt.figure()
    plt.plot([1, 2, 3], [4, 1, 5])
    plt.title("–ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞")
    send_plot(fig, caption="üìà –í–æ—Ç –≤–∞—à –≥—Ä–∞—Ñ–∏–∫")
